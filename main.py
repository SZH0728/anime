# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import re
import time

from PyQt5 import QtCore, QtGui, QtWidgets
import value_rc
import sys
from analysis import *
import broswer
import setting


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1000, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/.png/image/Anime.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(0, 0, 61, 61))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap(":/.png/image/Anime.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(Form)
        self.lineEdit.setGeometry(QtCore.QRect(70, 10, 181, 20))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(Form)
        self.pushButton.setGeometry(QtCore.QRect(260, 10, 61, 23))
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/.png/image/search.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon1)
        self.pushButton.setObjectName("pushButton")
        self.line = QtWidgets.QFrame(Form)
        self.line.setGeometry(QtCore.QRect(320, 0, 20, 601))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.comboBox = QtWidgets.QComboBox(Form)
        self.comboBox.setGeometry(QtCore.QRect(130, 40, 81, 22))
        self.comboBox.setObjectName("comboBox")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(70, 40, 54, 21))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Form)
        self.label_3.setGeometry(QtCore.QRect(220, 40, 31, 21))
        self.label_3.setObjectName("label_3")
        self.comboBox_2 = QtWidgets.QComboBox(Form)
        self.comboBox_2.setGeometry(QtCore.QRect(258, 40, 61, 22))
        self.comboBox_2.setObjectName("comboBox_2")
        self.label_4 = QtWidgets.QLabel(Form)
        self.label_4.setGeometry(QtCore.QRect(340, 10, 111, 141))
        self.label_4.setText("")
        self.label_4.setScaledContents(True)
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(Form)
        self.label_5.setGeometry(QtCore.QRect(470, 10, 281, 21))
        self.label_5.setObjectName("label_5")
        self.label_6 = QtWidgets.QLabel(Form)
        self.label_6.setGeometry(QtCore.QRect(470, 40, 131, 21))
        self.label_6.setObjectName("label_6")
        self.pushButton_3 = QtWidgets.QPushButton(Form)
        self.pushButton_3.setGeometry(QtCore.QRect(920, 10, 75, 23))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_2 = QtWidgets.QPushButton(Form)
        self.pushButton_2.setGeometry(QtCore.QRect(840, 10, 75, 23))
        self.pushButton_2.setObjectName("pushButton_2")
        self.label_7 = QtWidgets.QLabel(Form)
        self.label_7.setGeometry(QtCore.QRect(620, 40, 121, 21))
        self.label_7.setObjectName("label_7")
        self.label_8 = QtWidgets.QLabel(Form)
        self.label_8.setGeometry(QtCore.QRect(753, 40, 241, 21))
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(Form)
        self.label_9.setGeometry(QtCore.QRect(470, 71, 521, 91))
        self.label_9.setWordWrap(True)
        self.label_9.setObjectName("label_9")
        self.pushButton_4 = QtWidgets.QPushButton(Form)
        self.pushButton_4.setGeometry(QtCore.QRect(760, 10, 75, 23))
        self.pushButton_4.setObjectName("pushButton_4")
        self.line_2 = QtWidgets.QFrame(Form)
        self.line_2.setGeometry(QtCore.QRect(330, 160, 671, 16))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        self.listWidget = QtWidgets.QListWidget(Form)
        self.listWidget.setGeometry(QtCore.QRect(10, 70, 311, 521))
        self.listWidget.setObjectName("listWidget")
        self.checkBox_2 = QtWidgets.QCheckBox(Form)
        self.checkBox_2.setGeometry(QtCore.QRect(620, 180, 71, 21))
        self.checkBox_2.setTristate(False)
        self.checkBox_2.setObjectName("checkBox_2")
        self.checkBox = QtWidgets.QCheckBox(Form)
        self.checkBox.setGeometry(QtCore.QRect(700, 180, 91, 21))
        self.checkBox.setObjectName("checkBox")
        self.pushButton_5 = QtWidgets.QPushButton(Form)
        self.pushButton_5.setGeometry(QtCore.QRect(900, 180, 91, 23))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(Form)
        self.pushButton_6.setGeometry(QtCore.QRect(804, 180, 91, 23))
        self.pushButton_6.setObjectName("pushButton_6")
        self.listWidget_2 = QtWidgets.QListWidget(Form)
        self.listWidget_2.setGeometry(QtCore.QRect(340, 210, 651, 381))
        self.listWidget_2.setObjectName("listWidget_2")
        self.comboBox_3 = QtWidgets.QComboBox(Form)
        self.comboBox_3.setGeometry(QtCore.QRect(340, 180, 81, 22))
        self.comboBox_3.setObjectName("comboBox_3")

        # 非生成代码
        self.research_text = ''  # 搜索内容
        self.research_data = {}  # 搜索数据
        self.detail_data = {}
        self.detail_name = ''
        self.error = ''
        self.comboBox.addItems(other.name)
        self.comboBox_2.addItems(other.show)
        self.comboBox_3.addItem('所有')
        self.analysis = analysis(broswer.driver_setting(show=setting.show), broswer.view_setting())
        self.analysis.start()
        self.download = other.downloading(broswer.driver_setting(show=setting.show), setting.path)
        self.listWidget.setWordWrap(True)
        self.listWidget.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.listWidget.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.listWidget_2.setSelectionMode(QtWidgets.QAbstractItemView.ExtendedSelection)
        self.listWidget_2.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.label_9.setAlignment(QtCore.Qt.AlignTop)
        self.checkBox_2.toggle()
        self.time = QtCore.QTimer()
        self.time.start(10000)


        # connect
        self.pushButton_4.clicked.connect(self.name_change)
        self.pushButton.clicked.connect(self.research)
        self.pushButton_2.clicked.connect(self.pic_save)
        self.analysis.research.connect(self.research_save)
        self.comboBox_2.activated.connect(self.research_change)
        self.comboBox_3.activated.connect(self.detail_list_change)
        self.listWidget.itemClicked.connect(self.detail)
        self.analysis.detail.connect(self.detail_change)
        self.pushButton_3.clicked.connect(self.download_put_all)
        self.pushButton_5.clicked.connect(self.download_put_list)
        self.pushButton_6.clicked.connect(self.download_put_choose)
        self.time.timeout.connect(self.raise_error)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

        self.Form = Form

    def name_change(self):
        text, flag = QtWidgets.QInputDialog.getText(self.Form, '名称修改', '请输入修改后名称',
                                                    QtWidgets.QLineEdit.Normal, self.label_5.text())
        if flag:
            self.label_5.setText(text)
            self.detail_data['name'] = text
            self.detail_list_change()

    def pic_save(self):
        try:
            other.pic_save(self.detail_data['pic'], setting.path, self.detail_data['name']+'.png')
        except KeyError:
            QtWidgets.QMessageBox.critical(self.Form, '错误', '还未加载内容',
                                              QtWidgets.QMessageBox.Ok)
        else:
            QtWidgets.QMessageBox.information(self.Form, '图片保存', '图片保存成功（%s）' % setting.path,
                                              QtWidgets.QMessageBox.Ok)

    def raise_error(self):
        self.time.start(10000)
        if self.error != self.download.error:
            self.error = self.download.error
            QtWidgets.QMessageBox.critical(self.Form, '下载失败', self.error+'下载失败',
                                           QtWidgets.QMessageBox.Ok)

    def download_put_all(self):
        data = self.data_change()
        for index, i in enumerate(data['play']):
            if len(data['play']) == 1:
                self.download.add(data['name'], other.web_name_change(data['from']), i)
                break
            self.download.add(data['name'], other.web_name_change(data['from']), i, '下载列表 ' + str(index+1))

    def download_put_list(self):
        if self.comboBox_3.currentText() == '所有':
            self.download_put_all()
        else:
            data = self.data_change()
            num = int(self.comboBox_3.currentText().split(' ')[1])
            num -= 1
            if len(data['play']) == 1:
                self.download.add(data['name'], other.web_name_change(data['from']), data['play'][num])
            else:
                self.download.add(data['name'], other.web_name_change(data['from']),
                                  data['play'][num], '下载列表 ' + str(num))

    def download_put_choose(self):
        choose = self.listWidget_2.selectedItems()
        data = self.data_change()
        put = []
        for i in choose:
            i = i.text().split('  ')[2]
            for j in data['play']:
                for k in j:
                    if k['url'] == i:
                        put.append(k)
        self.download.add(data['name'], other.web_name_change(data['from']), put)

    def data_change(self):
        data = self.detail_data
        for ind, i in enumerate(data['play']):
            num = 0
            for index, j in enumerate(list(i)):
                if re.search(r'\.5$', j['name']) is not None and not self.checkBox.isChecked():
                    del data['play'][ind][index-num]
                    num += 1
                    continue
                elif re.search(r'^\d+$|\.5$', j['name']) is None and not self.checkBox_2.isChecked():
                    del data['play'][ind][index-num]
                    num += 1
                    continue
                data['play'][ind][index-num]['name'] = data['name']+j['name']
        return data

    def detail(self, item):
        if item.isSelected():
            text = item.text()
            if text != self.detail_name:
                self.analysis.broswer.adds(fcdm.detail(self.research_data[text]['url']))
                self.label_5.setText('正在加载')

    def detail_change(self):
        result = dict(self.analysis.result)
        self.comboBox_3.clear()
        self.comboBox_3.addItem('所有')
        self.detail_data = result
        self.label_5.setText(result['name'])
        self.label_6.setText(result['auther'])
        self.label_7.setText(result['time'])
        self.label_8.setText(result['model'])
        self.label_9.setText(result['info'])
        photo = QtGui.QPixmap()
        photo.loadFromData(result['pic'])
        self.label_4.setPixmap(photo)
        for i in range(1, len(result['play'])+1):
            self.comboBox_3.addItem('下载列表 '+str(i))
        self.detail_list_change()

    def detail_list_change(self):
        self.listWidget_2.clear()
        if self.comboBox_3.currentText() == '所有':
            for i in self.detail_data['play']:
                for j in i:
                    item = QtWidgets.QListWidgetItem(self.listWidget_2)
                    item.setText(self.detail_data['name']+'  '+j['name']+'  '+j['url'])
                    item.setToolTip('来源：下载列表 '+str(self.detail_data['play'].index(i)+1))
        else:
            choose = self.comboBox_3.currentText().split(' ')
            for j in self.detail_data['play'][int(choose[1])-1]:
                item = QtWidgets.QListWidgetItem(self.listWidget_2)
                item.setText(self.detail_data['name']+'  '+j['name']+'  '+j['url'])
                item.setToolTip('来源：下载列表 ' + str(int(choose[1])-1))

    def research(self):
        if self.lineEdit.text() != self.research_text and self.lineEdit.text() != '':
            self.research_text = self.lineEdit.text()
            self.comboBox_2.clear()
            self.comboBox_2.addItems(other.show)
            self.research_data = {}
            text = self.comboBox.currentText()
            if text == '所有':
                self.analysis.broswer.adds(fcdm.research(self.research_text))
                # self.analysis.broswer.adds(ttt.research(self.research_text))
            elif text == '风车动漫':
                self.analysis.broswer.adds(fcdm.research(self.research_text))
            elif text == '233动漫':
                self.analysis.broswer.adds(ttt.research(self.research_text))

    def research_save(self):
        result = self.analysis.result
        index = True
        for i in result:
            self.research_data[i['name']] = i
            if index:
                self.comboBox_2.addItem(other.web_name_change(i['from']))
                index = False
        self.research_change()

    def research_change(self):
        self.listWidget.clear()
        choose = self.comboBox_2.currentText()
        if choose in other.show:
            for key, value in self.research_data.items():
                if choose == '匹配' and self.research_text != value['name']:
                    continue
                elif choose == '包含' and self.research_text not in value['name']:
                    continue
                photo = QtGui.QPixmap()
                photo.loadFromData(value['pic'])
                item = QtWidgets.QListWidgetItem(self.listWidget)
                item.setText(value['name'])
                item.setIcon(QtGui.QIcon(photo))
                item.setToolTip('来源：' + other.web_name_change(value['from']) + ' ' + key)
        else:
            for key, value in self.research_data.items():
                if other.web_name_change(key) != choose:
                    continue
                photo = QtGui.QPixmap()
                photo.loadFromData(value['pic'])
                item = QtWidgets.QListWidgetItem(self.listWidget)
                item.setText(value['name'])
                item.setIcon(QtGui.QIcon(photo))
                item.setToolTip('来源：' + other.web_name_change(value['from']) + ' ' + key)

    def quit(self):
        self.analysis.quit()
        self.download.quit()

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Anime"))
        self.pushButton.setText(_translate("Form", "搜索"))
        self.label_2.setText(_translate("Form", "搜索范围："))
        self.label_3.setText(_translate("Form", "显示："))
        self.label_5.setText(_translate("Form", "没有数据"))
        self.label_6.setText(_translate("Form", "没有数据"))
        self.pushButton_3.setText(_translate("Form", "下载全部"))
        self.pushButton_2.setText(_translate("Form", "保存图片"))
        self.label_7.setText(_translate("Form", "没有数据"))
        self.label_8.setText(_translate("Form", "没有数据"))
        self.label_9.setText(_translate("Form", "没有数据"))
        self.pushButton_4.setText(_translate("Form", "名称修改"))
        self.checkBox_2.setText(_translate("Form", "下载OVA"))
        self.checkBox.setText(_translate("Form", "下载 .5 集"))
        self.pushButton_5.setText(_translate("Form", "下载当前列表"))
        self.pushButton_6.setText(_translate("Form", "下载选择内容"))


class analysis(QtCore.QThread):
    # 解析器
    research = QtCore.pyqtSignal()
    detail = QtCore.pyqtSignal()

    def __init__(self, driver_set, view_set):
        super(analysis, self).__init__()
        self.broswer = broswer.broswer_more(driver_set, view_set)
        self.keep = True
        self.result = []

    def run(self):
        while self.keep:
            r = self.broswer.random()
            time.sleep(2)
            if r is None:
                continue
            if r['main']['html'] is None:
                continue
            if 'fcdm' in r['other']:
                if 'research' in r['other']:
                    self.result = fcdm.research_analysis(r['main']['html'])
                    self.research.emit()
                    QtCore.QThread.msleep(2000)
                if 'detail' in r['other']:
                    self.result = fcdm.detail_analysis(r['main']['html'])
                    self.detail.emit()
                    QtCore.QThread.msleep(2000)
            elif 'ttt' in r['other']:
                if 'research' in r['other']:
                    self.result = ttt.research_analysis(r['main']['html'])
                    self.research.emit()
                    QtCore.QThread.msleep(2000)
                if 'detail' in r['other']:
                    self.result = ttt.detail_analysis(r['main']['html'])
                    self.detail.emit()
                    QtCore.QThread.msleep(2000)

    def quit(self):
        self.keep = False
        self.broswer.quit()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    MainWindow.setWindowFlags(QtCore.Qt.MSWindowsFixedSizeDialogHint)
    ui = Ui_Form()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
